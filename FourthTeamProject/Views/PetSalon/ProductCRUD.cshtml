<link href="~/lib/bootstrap/dist/css/bootstrap.min.css" rel="stylesheet" />
<link href="~/css/saloncss/style.css" rel="stylesheet" />


<div id="app" class="container">
    @*<-----------選項-------------->*@
    <nav class="navbar navbar-expand bg-white navbar-light shadow-sm py-3 py-lg-0 px-3 px-lg-0 ">
        <div class="collapse navbar-collapse" id="navbarCollapse">
            <div class="navbar-nav py-0">
                <a class="nav-item nav-link" @@click="CreateProduct">新增寵物商品</a>
                <a class="nav-item nav-link" @@click="CreateType">新增商品項目</a>
                <a class="nav-item nav-link" @@click="CreateStock">商品庫存調整</a>
            </div>
        </div>
    </nav>

    @*<-----------編輯頁面-------------->*@
    <div class="form-group">
        <table class="table table-striped table-hover text-center">
            <thead>
                <tr>
                    <th style="width:10%">編輯</th>
                    <th style="width:10%">寵物種類</th>
                    <th style="width:10%">商品項目</th>
                    <th style="width:10%">商品名稱</th>
                    <th style="width:10%">商品規格</th>
                    <th>商品內容</th>
                    <th style="width:10%">價格</th>
                    <th style="width:10%">庫存</th>
                </tr>
            </thead>
            <tbody>
                <tr v-for="item in ProductDTO">
                    <template v-if="item.editProduct === true">
                        <td>
                            <button class="btn btn-success" @@click="Update(item)">確定修改</button>
                            <button class="btn btn-warning" @@click="Cancel">取消修改</button>
                        </td>
                        <td>{{item.productCatagoryName}}</td>
                        <td>{{item.productTypeName}}</td>
                        <td><input type="text" v-model="item.productName" /></td>
                        <td><input type="text" v-model="item.productSpecification" /></td>
                        <td><input type="text" v-model="item.productContent" /></td>
                        <td><input type="number" v-model="item.unitPrice" /></td>
                        <td><input type="number" v-model="item.stock" /></td>
                    </template>
                    <template v-else>
                        <td>
                            <button class="btn btn-primary" @@click="Edit(item.productID)">編輯</button>
                            <button class="btn btn-primary" @@click="Delete(item.productID)">刪除</button>
                        </td>
                        <td>{{item.productCatagoryName}}</td>
                        <td>{{item.productTypeName}}</td>
                        <td>{{item.productName}}</td>
                        <td>{{item.productSpecification}}</td>
                        <td>{{item.productContent}}</td>
                        <td>{{item.unitPrice}}</td>
                        <td>{{item.stock}}</td>
                    </template>
                </tr>
            </tbody>
        </table>
    </div>

    @*<----------------新增寵物商品----------------->*@
    <div class="modal fade" id="InsertProductPage" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">新增寵物商品</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form>
                        <div class="mb-3">
                            <label for="recipient-name" class="col-form-label">寵物種類</label>
                            <select class="form-select form-select-lg mb-3" aria-label=".form-select-lg example" v-model="productCatagoryName">
                                <option v-for="item in ProductDTO" :key="item.productCatagoryId">{{ item.productCatagoryName }}</option>
                            </select>
                        </div>
                        <div class="mb-3">
                            <label for="recipient-name" class="col-form-label">商品項目</label>
                            <select class="form-select form-select-lg mb-3" aria-label=".form-select-lg example" v-model="productTypeName">
                                <option v-for="item in ProductDTO" :key="item.productTypeId">{{ item.productTypeName }}</option>
                            </select>
                        </div>
                        <div class="mb-3">
                            <label for="recipient-name" class="col-form-label">商品名稱</label>
                            <input type="text" class="form-control" id="recipient-name" v-model="productName">
                        </div>
                        <div class="mb-3">
                            <label for="recipient-name" class="col-form-label">商品規格</label>
                            <input type="text" class="form-control" id="recipient-name" v-model="productSpecification">
                        </div>
                        <div class="mb-3">
                            <label for="message-text" class="col-form-label">商品內容</label>
                            <textarea class="form-control" id="message-text" v-model="productContent"></textarea>
                        </div>
                        <div class="mb-3">
                            <label for="recipient-name" class="col-form-label">價格</label>
                            <input type="number" class="form-control" id="recipient-name" v-model="unitPrice">
                        </div>
                        <div class="mb-3">
                            <label for="recipient-name" class="col-form-label">庫存</label>
                            <input type="number" class="form-control" id="recipient-name" v-model="stock">
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">取消</button>
                    <button type="button" class="btn btn-primary" @@click="InsertProduct">新增</button>
                </div>
            </div>
        </div>
    </div>

</div>


@section Scripts
    {
    <script src="https://cdn.jsdelivr.net/npm/vue@2.7.14/dist/vue.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/axios/1.4.0/axios.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.min.js" integrity="sha384-fbbOQedDUMZZ5KreZpsbe1LCZPVmfTnH7ois6mU1QK+m14rQ1l2bGBq41eYeM/fS" crossorigin="anonymous"></script>

    <script>

        let app = new Vue({
            el: "#app",
            data: {
                ProductDTO: [],
                ProductPageDTO:[],
                productCatagoryName: "",
                productTypeName: "",
                productName: "",
                productSpecification: "",
                productContent: "",
                unitPrice: "",
                stock: "",
                ProductNameOld: "",
                ProductSpecificationOld: "",
                ProductContentOld: "",
                UnitPriceOld: "",
                StockOld: "",
            },
            mounted: function () {
                let _this = this;
                _this.FilterProductDTO();
            },
            methods: {
                FilterProductDTO: function () {
                    let _this = this;
                    axios.get(`/api/ProductEnterprise/GetProduct`).then(response => _this.ProductDTO = response.data)
                },
                Edit: function (ProductID) {
                    let _this = this;
                    var ProductList = [];
                    for (var i = 0; i < _this.ProductDTO.length; i++) {
                        var item = _this.ProductDTO[i];
                        if (ProductID == item.productID) {
                            item.editProduct = true;
                            _this.ProductNameOld = item.productName;
                            _this.ProductSpecificationOld = item.productSpecification;
                            _this.ProductContentOld = item.productContent;
                            _this.UnitPriceOld = item.unitPrice;
                            _this.StockOld = item.stock;
                        }
                        ProductList.push(item);
                    }
                    _this.ProductDTO = ProductList;
                },
                Delete: function (ProductID) {
                    let _this = this;
                    var ret = confirm("確定刪除嗎??");
                    if (ret == true) {
                        axios.delete(`/api/ProductEnterprise/DeleteProduct/${ProductID}`).then(response => {
                            alert(response.data);
                            _this.FilterProductDTO();
                        });
                    }
                },
                Update: function (item) {
                    let _this = this;
                    var request = {
                        ProductID: item.productID,
                        ProductName: item.productName,
                        ProductSpecification: item.productSpecification,
                        ProductContent: item.productContent,
                        UnitPrice: item.unitPrice,
                        Stock: item.stock,
                    };
                    axios.put(`/api/ProductEnterprise/PutProduct/${item.productID}`, request).then(response => {
                        alert(response.data);
                        _this.Cancel();
                        _this.FilterProductDTO();
                    }).catch(error => {
                        console.log(error);
                    });
                },
                Cancel: function () {
                    let _this = this;
                    var ProductList = [];
                    for (var i = 0; i < _this.ProductDTO.length; i++) {
                        var item = _this.ProductDTO[i];
                        if (item.editProduct == true) {
                            item.editProduct = false;
                            item.productName = _this.ProductNameOld;
                            item.productSpecification = _this.ProductSpecificationOld;
                            item.productContent = _this.ProductContentOld;
                            item.unitPrice = _this.UnitPriceOld;
                            item.stock = _this.StockOld;
                        }
                        ProductList.push(item);
                    }
                    _this.ProductDTO = ProductList;
                },
                CreateProduct: function () {
                    let _this = this;
                        _this.productCatagoryName = "",
                        _this.productTypeName = "",
                        _this.productName = "",
                        _this.productSpecification = "",
                        _this.productContent = "",
                        _this.unitPrice = "",
                        _this.stock = "",
                        axios.get(`/api/ProductEnterprise/GetProductPage`).then(response => _this.ProductPageDTO = response.data)
                        $("#InsertProductPage").modal('show');
                },
                InsertProduct: function () { },
                CreateType: function () { },
                CreateStock: function () { },
            }
        })
    </script>
    }